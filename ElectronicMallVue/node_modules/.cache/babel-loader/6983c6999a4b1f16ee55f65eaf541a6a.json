{"ast":null,"code":"import _objectSpread from \"D:/Workspace/graduation_project/ElectronicMall/ElectronicMallVue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"D:/Workspace/graduation_project/ElectronicMall/ElectronicMallVue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { CanvasRenderer } from './canvasRenderer';\nimport API from '@/utils/request';\nimport MapImportDialog from './MapImportDialog.vue';\nexport default {\n  components: {\n    MapImportDialog: MapImportDialog\n  },\n  data: function data() {\n    return {\n      showImportDialog: false,\n      canvasWidth: 1300,\n      canvasHeight: 560,\n      gridSize: 20,\n      blockX: 0,\n      blockY: 0,\n      currentFloor: '一楼',\n      allShops: [],\n      firstFloorShops: [],\n      secondFloorShops: [],\n      firstFloorObstacles: [{\n        x: 3,\n        y: 11\n      }, {\n        x: 5,\n        y: 13\n      }],\n      secondFloorObstacles: [{\n        x: 4,\n        y: 5\n      }, {\n        x: 9,\n        y: 2\n      }],\n      pathStart: null,\n      pathEnd: null,\n      // UI状态\n      hoverInfo: '',\n      infoBoxVisible: false,\n      treeImage: new Image(),\n      mouseX: 0,\n      mouseY: 0\n    };\n  },\n  computed: {\n    currentFloorShops: function currentFloorShops() {\n      return this.currentFloor === '一楼' ? this.firstFloorShops : this.secondFloorShops;\n    },\n    currentFloorObstacles: function currentFloorObstacles() {\n      return this.currentFloor === '一楼' ? this.firstFloorObstacles : this.secondFloorObstacles;\n    },\n    infoBoxStyle: function infoBoxStyle() {\n      return {\n        display: this.infoBoxVisible ? 'block' : 'none',\n        left: this.mouseX + 'px',\n        top: this.mouseY + 'px'\n      };\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.fetchShops();\n\n            case 2:\n              _this.treeImage.src = require('./Resources/tree.png');\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  mounted: function mounted() {\n    this.renderer = new CanvasRenderer(this, 'floorCanvas');\n    this.renderer.init();\n    this.canvas = document.getElementById('floorCanvas');\n    this.infoBox = document.getElementById('infoBox');\n    window.addEventListener('keydown', this.handleKeyPress);\n    this.pathStart = {\n      x: this.blockX,\n      y: this.blockY\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.renderer.destroy();\n    window.removeEventListener('keydown', this.handleKeyPress);\n  },\n  methods: {\n    fetchShops: function fetchShops() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$API$get, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return API.get('/api/shops');\n\n              case 3:\n                _yield$API$get = _context2.sent;\n                data = _yield$API$get.data;\n                _this2.allShops = data.map(function (shop) {\n                  return {\n                    x: shop.x || 0,\n                    y: shop.y || 0,\n                    width: shop.width || 1,\n                    height: shop.height || 1,\n                    floor: Number(shop.floor) || 1,\n                    shopName: shop.shopName || '123',\n                    shape: shop.shape || 'rect',\n                    info: shop.shopName || '未知店铺',\n                    centerX: shop.x + shop.width / 2,\n                    centerY: shop.y + shop.height / 2\n                  };\n                });\n                console.log('Fetched shops:', _this2.allShops);\n\n                _this2.sortShopsByFloor();\n\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error('数据加载失败:', _context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 10]]);\n      }))();\n    },\n    handleShopsSaved: function handleShopsSaved() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this3.fetchShops();\n\n              case 2:\n                _this3.renderer.init();\n\n                console.log('地图数据已刷新');\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    sortShopsByFloor: function sortShopsByFloor() {\n      var _this4 = this;\n\n      this.firstFloorShops = this.allShops.filter(function (shop) {\n        return shop.floor == 1;\n      }).map(function (shop) {\n        return _objectSpread(_objectSpread({}, shop), {}, {\n          shape: _this4.getShopShape(shop)\n        });\n      });\n      this.secondFloorShops = this.allShops.filter(function (shop) {\n        return shop.floor == 2;\n      }).map(function (shop) {\n        return _objectSpread(_objectSpread({}, shop), {}, {\n          shape: _this4.getShopShape(shop)\n        });\n      });\n    },\n    getShopShape: function getShopShape(shop) {\n      return shop.shape;\n    },\n    handleKeyPress: function handleKeyPress(e) {\n      var newPos = {\n        x: this.blockX,\n        y: this.blockY\n      };\n\n      switch (e.key) {\n        case 'ArrowUp':\n          newPos.y--;\n          break;\n\n        case 'ArrowDown':\n          newPos.y++;\n          break;\n\n        case 'ArrowLeft':\n          newPos.x--;\n          break;\n\n        case 'ArrowRight':\n          newPos.x++;\n          break;\n\n        case 'Enter':\n          if (!this.currentFloorShops) return;\n          var elevator = this.currentFloorShops.find(function (s) {\n            return s.shape === 'elevator';\n          });\n\n          if (elevator && this.blockX >= elevator.x && this.blockX < elevator.x + elevator.width && this.blockY >= elevator.y && this.blockY < elevator.y + elevator.height) {\n            if (this.currentFloor === '一楼') {\n              this.renderer.loadSecondFloor();\n            } else if (this.currentFloor === '二楼') {\n              this.renderer.loadFirstFloor();\n            }\n          }\n\n          break;\n      }\n\n      if (this.isValidPosition(newPos)) {\n        this.blockX = newPos.x;\n        this.blockY = newPos.y;\n        this.pathStart = {\n          x: this.blockX,\n          y: this.blockY\n        };\n        this.renderer.drawColoredGrid(this.pathStart.x, this.pathStart.y, 'blue');\n\n        if (this.pathEnd) {\n          this.renderer.updatePath(this.pathStart, this.pathEnd);\n        }\n      } // 新增空格键自动寻路\n\n\n      if (e.key === ' ') {\n        var start = {\n          x: this.blockX,\n          y: this.blockY\n        };\n        var end = this.pathEnd;\n\n        if (end) {\n          var path = this.renderer.pathfinder.findPath(start, end);\n\n          if (path) {\n            this.followPath(path);\n          }\n        }\n      }\n    },\n    isValidPosition: function isValidPosition(pos) {\n      return !this.currentFloorObstacles.some(function (o) {\n        return o.x === pos.x && o.y === pos.y;\n      });\n    },\n    handleMouseMove: function handleMouseMove(event) {\n      var rect = this.canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / this.gridSize);\n      var row = Math.floor(mouseY / this.gridSize);\n\n      if (!this.currentFloorShops) {\n        this.infoBoxVisible = false;\n        return;\n      }\n\n      var shop = this.currentFloorShops.find(function (s) {\n        if (s.shape === 'elevator') {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        } else {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        }\n      });\n      this.infoBoxVisible = !!shop;\n\n      if (shop) {\n        this.infoBox.style.left = event.clientX + 'px';\n        this.infoBox.style.top = event.clientY + 'px'; // 使用 info 字段显示店铺名称\n\n        this.infoBox.textContent = shop.info;\n      }\n    },\n    handleClick: function handleClick(event) {\n      var rect = this.$el.getBoundingClientRect();\n      var gridX = Math.floor((event.clientX - rect.left) / this.gridSize) - 2;\n      var gridY = Math.floor((event.clientY - rect.top) / this.gridSize) - 2;\n\n      if (event.ctrlKey) {\n        this.pathEnd = {\n          x: gridX,\n          y: gridY\n        };\n        console.log('设置终点:', this.pathEnd);\n        this.renderer.drawColoredGrid(this.pathEnd.x, this.pathEnd.y, 'blue');\n        this.renderer.updatePath(this.pathStart, this.pathEnd);\n      }\n\n      if (event.shiftKey) {\n        this.pathEnd = {\n          x: gridX,\n          y: gridY\n        };\n        console.log('A*算法终点:', this.pathEnd);\n        this.renderer.updateAstarPath(this.pathStart, this.pathEnd);\n      }\n\n      if (this.hoverInfo) {\n        alert(this.hoverInfo);\n      }\n    },\n    followPath: function followPath(path) {\n      var _this5 = this;\n\n      var currentStep = 0;\n      var moveInterval = setInterval(function () {\n        if (currentStep >= path.length) {\n          clearInterval(moveInterval);\n          return;\n        }\n\n        var next = path[currentStep];\n\n        if (_this5.isValidPosition(next)) {\n          _this5.blockX = next.x;\n          _this5.blockY = next.y;\n          currentStep++;\n        } else {\n          clearInterval(moveInterval); // 路径被阻断\n        }\n      }, 300); // 每300ms移动一步\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["components","MapImportDialog","data","showImportDialog","canvasWidth","canvasHeight","gridSize","blockX","blockY","currentFloor","allShops","firstFloorShops","secondFloorShops","firstFloorObstacles","x","y","secondFloorObstacles","pathStart","pathEnd","hoverInfo","infoBoxVisible","treeImage","mouseX","mouseY","computed","currentFloorShops","currentFloorObstacles","infoBoxStyle","display","left","top","created","mounted","window","beforeDestroy","methods","fetchShops","API","width","height","floor","shopName","shape","info","centerX","centerY","console","handleShopsSaved","sortShopsByFloor","filter","map","shop","getShopShape","handleKeyPress","e","newPos","isValidPosition","pos","handleMouseMove","event","col","row","handleClick","alert","followPath","path","clearInterval","currentStep"],"sourceRoot":"src/views/front/mall","sources":["Tour.vue"],"sourcesContent":["<template>\r\n  <div class=\"tour-container\">\r\n    <div class=\"canvas-header\" :style=\"{ width: canvasWidth + 'px' }\">\r\n      <div class=\"floor-info\">当前楼层: {{ currentFloor }}</div>\r\n      <div class=\"map-controls\">\r\n        <el-button \r\n          class=\"import-btn\"\r\n          type=\"primary\" \r\n          @click=\"showImportDialog = true\">\r\n          导入\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"floor-info-container\">\r\n      <canvas \r\n        id=\"floorCanvas\"\r\n        :width=\"canvasWidth\"\r\n        :height=\"canvasHeight\"\r\n        @mousemove=\"handleMouseMove\"\r\n        @click=\"handleClick\"\r\n      ></canvas>\r\n\r\n      <map-import-dialog\r\n        :visible.sync=\"showImportDialog\"\r\n        @shops-saved=\"handleShopsSaved\" \r\n      />\r\n\r\n      <div \r\n        id=\"infoBox\"\r\n        :style=\"infoBoxStyle\"\r\n      >{{ hoverInfo }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { CanvasRenderer } from './canvasRenderer';\r\nimport API from '@/utils/request';\r\nimport MapImportDialog from './MapImportDialog.vue'\r\n\r\nexport default {\r\n  components: {\r\n    MapImportDialog\r\n  },\r\n  data() {\r\n    return {\r\n      showImportDialog: false,\r\n      canvasWidth: 1300,\r\n      canvasHeight: 560,\r\n      gridSize: 20,\r\n      \r\n      blockX: 0,\r\n      blockY: 0,\r\n      currentFloor: '一楼',\r\n      \r\n      allShops: [],\r\n      firstFloorShops: [],\r\n      secondFloorShops: [],\r\n      firstFloorObstacles: [\r\n        { x: 3, y: 11 },\r\n        { x: 5, y: 13 }\r\n      ],\r\n      secondFloorObstacles: [\r\n        { x: 4, y: 5 },\r\n        { x: 9, y: 2 }\r\n      ],\r\n      pathStart: null,\r\n      pathEnd: null,\r\n      \r\n      // UI状态\r\n      hoverInfo: '',\r\n      infoBoxVisible: false,\r\n      treeImage: new Image(),\r\n      mouseX: 0,\r\n      mouseY: 0\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    currentFloorShops() {\r\n      return this.currentFloor === '一楼' \r\n        ? this.firstFloorShops \r\n        : this.secondFloorShops;\r\n    },\r\n    currentFloorObstacles() {\r\n      return this.currentFloor === '一楼'\r\n        ? this.firstFloorObstacles\r\n        : this.secondFloorObstacles;\r\n    },\r\n    infoBoxStyle() {\r\n      return {\r\n        display: this.infoBoxVisible ? 'block' : 'none',\r\n        left: this.mouseX + 'px',\r\n        top: this.mouseY + 'px',\r\n      }; \r\n    }\r\n  },\r\n\r\n  async created() {\r\n    await this.fetchShops();\r\n    this.treeImage.src = require('./Resources/tree.png');\r\n  },\r\n\r\n  mounted() {\r\n    this.renderer = new CanvasRenderer(this, 'floorCanvas');\r\n    this.renderer.init();\r\n    this.canvas = document.getElementById('floorCanvas');\r\n    this.infoBox = document.getElementById('infoBox');\r\n    window.addEventListener('keydown', this.handleKeyPress);\r\n    this.pathStart = { x: this.blockX, y: this.blockY };\r\n    \r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.renderer.destroy();\r\n    window.removeEventListener('keydown', this.handleKeyPress);\r\n  },\r\n\r\n  methods: {\r\n    async fetchShops() {\r\n      try {\r\n        const { data } = await API.get('/api/shops');\r\n        this.allShops = data.map(shop => ({\r\n          x: shop.x || 0,\r\n          y: shop.y || 0,\r\n          width: shop.width || 1,\r\n          height: shop.height || 1,\r\n          floor: Number(shop.floor) || 1,\r\n          shopName: shop.shopName || '123',\r\n          shape: shop.shape || 'rect',\r\n          info: shop.shopName || '未知店铺' ,\r\n          centerX: shop.x + shop.width/2,\r\n          centerY: shop.y + shop.height/2\r\n        }));\r\n        console.log('Fetched shops:', this.allShops); \r\n\r\n        this.sortShopsByFloor();\r\n      } catch (error) {\r\n        console.error('数据加载失败:', error);\r\n      }\r\n    },\r\n    async handleShopsSaved() {\r\n      await this.fetchShops();\r\n      this.renderer.init(); \r\n      console.log('地图数据已刷新');\r\n    },\r\n\r\n    sortShopsByFloor() {\r\n      this.firstFloorShops = this.allShops\r\n        .filter(shop => shop.floor == 1)\r\n        .map(shop => ({\r\n          ...shop,\r\n          shape: this.getShopShape(shop)\r\n        }));\r\n      \r\n      this.secondFloorShops = this.allShops\r\n        .filter(shop => shop.floor == 2)\r\n        .map(shop => ({\r\n          ...shop,\r\n          shape: this.getShopShape(shop)\r\n        }));\r\n    },\r\n\r\n    getShopShape(shop) {\r\n      return shop.shape;\r\n    },\r\n\r\n    handleKeyPress(e) {\r\n      const newPos = { x: this.blockX, y: this.blockY };\r\n      switch(e.key) {\r\n        case 'ArrowUp': newPos.y--; break;\r\n        case 'ArrowDown': newPos.y++; break;\r\n        case 'ArrowLeft': newPos.x--; break;\r\n        case 'ArrowRight': newPos.x++; break;\r\n        case 'Enter':\r\n          if (!this.currentFloorShops) return;          \r\n          const elevator = this.currentFloorShops.find(s => s.shape === 'elevator');\r\n          if (elevator && \r\n              this.blockX >= elevator.x &&\r\n              this.blockX < elevator.x + elevator.width &&\r\n              this.blockY >= elevator.y &&\r\n              this.blockY < elevator.y + elevator.height\r\n          ) {\r\n            if (this.currentFloor === '一楼') {\r\n              this.renderer.loadSecondFloor();\r\n            } else if (this.currentFloor === '二楼') {\r\n              this.renderer.loadFirstFloor();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (this.isValidPosition(newPos)) {\r\n        this.blockX = newPos.x;\r\n        this.blockY = newPos.y;\r\n        this.pathStart = { x: this.blockX, y: this.blockY };\r\n        this.renderer.drawColoredGrid(this.pathStart.x, this.pathStart.y, 'blue');\r\n        if (this.pathEnd) {\r\n          this.renderer.updatePath(this.pathStart, this.pathEnd);\r\n        }\r\n      }\r\n\r\n\r\n      // 新增空格键自动寻路\r\n      if (e.key === ' ') {\r\n        const start = { x: this.blockX, y: this.blockY };\r\n        const end = this.pathEnd;\r\n        if (end) {\r\n          const path = this.renderer.pathfinder.findPath(start, end);\r\n          if (path) {\r\n            this.followPath(path);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    isValidPosition(pos) {\r\n      return !this.currentFloorObstacles.some(\r\n        o => o.x === pos.x && o.y === pos.y\r\n      );\r\n    },\r\n\r\n    handleMouseMove  (event) {\r\n      const rect = this.canvas.getBoundingClientRect();\r\n      const mouseX = event.clientX - rect.left;\r\n      const mouseY = event.clientY - rect.top;\r\n\r\n      const col = Math.floor(mouseX / this.gridSize);\r\n      const row = Math.floor(mouseY / this.gridSize);\r\n\r\n      if (!this.currentFloorShops) {\r\n        this.infoBoxVisible = false;\r\n        return;\r\n      }\r\n      \r\n      const shop = this.currentFloorShops.find(s => {\r\n        if (s.shape === 'elevator') {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        } else {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        }\r\n      });\r\n      this.infoBoxVisible = !!shop;\r\n      if (shop) {\r\n        this.infoBox.style.left = event.clientX + 'px';\r\n        this.infoBox.style.top = event.clientY + 'px';\r\n        // 使用 info 字段显示店铺名称\r\n        this.infoBox.textContent = shop.info; \r\n      }\r\n    },\r\n\r\n    handleClick(event) {\r\n      const rect = this.$el.getBoundingClientRect();\r\n      const gridX = Math.floor((event.clientX - rect.left) / this.gridSize)-2;\r\n      const gridY = Math.floor((event.clientY - rect.top) / this.gridSize)-2;\r\n      if (event.ctrlKey) { \r\n        this.pathEnd = { x: gridX, y: gridY };\r\n        console.log('设置终点:', this.pathEnd);\r\n        this.renderer.drawColoredGrid(this.pathEnd.x, this.pathEnd.y, 'blue');\r\n        this.renderer.updatePath(this.pathStart, this.pathEnd);\r\n      }\r\n\r\n      if (event.shiftKey) { \r\n        this.pathEnd = { x: gridX, y: gridY };\r\n        console.log('A*算法终点:', this.pathEnd);\r\n        this.renderer.updateAstarPath(this.pathStart, this.pathEnd);\r\n          \r\n      } \r\n     \r\n      \r\n      if (this.hoverInfo) {\r\n        alert(this.hoverInfo);\r\n      }\r\n    },\r\n\r\n    followPath(path) {\r\n      let currentStep = 0;\r\n      const moveInterval = setInterval(() => {\r\n        if (currentStep >= path.length) {\r\n          clearInterval(moveInterval);\r\n          return;\r\n        }\r\n        \r\n        const next = path[currentStep];\r\n        if (this.isValidPosition(next)) {\r\n          this.blockX = next.x;\r\n          this.blockY = next.y;\r\n          currentStep++;\r\n        } else {\r\n          clearInterval(moveInterval); // 路径被阻断\r\n        }\r\n      }, 300); // 每300ms移动一步\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.tour-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n}\r\n.canvas-header {\r\n  position: relative;\r\n  height: 40px; /* 根据实际情况调整 */\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.floor-info {\r\n  text-align: center;\r\n  font-size: 18px;\r\n  margin: 10px 0;\r\n  align-items: center; \r\n  color: #333;\r\n}\r\n.map-controls {\r\n  margin-left: auto; /* 将按钮推到右侧 */\r\n}\r\ncanvas {\r\n  border: 1px solid #ccc;\r\n  background: #f5f5f5; /* 更改地图背景颜色 */\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n}\r\n\r\n#infoBox {\r\n  position: fixed;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  border: 1px solid #333;\r\n  padding: 8px;\r\n  pointer-events: none;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);\r\n  color: #333; /* 更改信息框文字颜色 */\r\n}\r\n.header-row {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n.floor-info {\r\n  margin-right: 10px; /* 可根据需要调整间距 */\r\n}\r\n.map-controls {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.import-btn {\r\n  margin-left: 10px; \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}