{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      canvasWidth: 800,\n      canvasHeight: 600,\n      infoBoxVisible: false,\n      gridSize: 20,\n      blockX: 1,\n      blockY: 1,\n      shops: [{\n        x: 5,\n        y: 5,\n        width: 2,\n        height: 2,\n        info: '这是一家服装店'\n      }, {\n        x: 7,\n        y: 2,\n        width: 1,\n        height: 3,\n        info: '这是一家咖啡店'\n      }],\n      obstacles: [{\n        x: 3,\n        y: 4\n      }, {\n        x: 6,\n        y: 6\n      }],\n      treeImage: new Image()\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var canvas = document.getElementById('Floor1');\n    var ctx = canvas.getContext('2d');\n    var infoBox = document.getElementById('infoBox');\n    this.treeImage.src = 'tree.png';\n\n    this.treeImage.onerror = function () {\n      console.error('树的图片加载失败');\n    };\n\n    var rows = this.canvasHeight / this.gridSize;\n    var cols = this.canvasWidth / this.gridSize;\n\n    var drawGrid = function drawGrid() {\n      ctx.strokeStyle = 'gray';\n      ctx.lineWidth = 1;\n\n      for (var i = 0; i <= rows; i++) {\n        ctx.beginPath();\n        ctx.moveTo(0, i * _this.gridSize);\n        ctx.lineTo(_this.canvasWidth, i * _this.gridSize);\n        ctx.stroke();\n      }\n\n      for (var _i = 0; _i <= cols; _i++) {\n        ctx.beginPath();\n        ctx.moveTo(_i * _this.gridSize, 0);\n        ctx.lineTo(_i * _this.gridSize, _this.canvasHeight);\n        ctx.stroke();\n      }\n    };\n\n    var drawGameElements = function drawGameElements() {\n      var x = _this.blockX * _this.gridSize;\n      var y = _this.blockY * _this.gridSize;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x, y, _this.gridSize, _this.gridSize);\n    };\n\n    var drawShops = function drawShops() {\n      ctx.fillStyle = 'blue';\n\n      _this.shops.forEach(function (shop) {\n        var x = shop.x * _this.gridSize;\n        var y = shop.y * _this.gridSize;\n        var w = shop.width * _this.gridSize;\n        var h = shop.height * _this.gridSize;\n        ctx.fillRect(x, y, w, h);\n      });\n    };\n\n    var drawObstacles = function drawObstacles() {\n      _this.obstacles.forEach(function (obstacle) {\n        var x = obstacle.x * _this.gridSize;\n        var y = obstacle.y * _this.gridSize;\n\n        if (_this.treeImage.complete) {\n          ctx.drawImage(_this.treeImage, x, y, _this.gridSize, _this.gridSize);\n        } else {\n          _this.treeImage.onload = function () {\n            ctx.drawImage(_this.treeImage, x, y, _this.gridSize, _this.gridSize);\n          };\n        }\n      });\n    };\n\n    var isCollision = function isCollision(x, y) {\n      return _this.obstacles.some(function (obstacle) {\n        return obstacle.x === x && obstacle.y === y;\n      });\n    };\n\n    var handleKeyPress = function handleKeyPress(event) {\n      var newX = _this.blockX;\n      var newY = _this.blockY;\n\n      switch (event.key) {\n        case 'ArrowUp':\n          newY--;\n          break;\n\n        case 'ArrowDown':\n          newY++;\n          break;\n\n        case 'ArrowLeft':\n          newX--;\n          break;\n\n        case 'ArrowRight':\n          newX++;\n          break;\n      }\n\n      if (newX >= 0 && newX < cols && newY >= 0 && newY < rows && !isCollision(newX, newY)) {\n        _this.blockX = newX;\n        _this.blockY = newY;\n      }\n    };\n\n    var handleMouseMove = function handleMouseMove(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / _this.gridSize);\n      var row = Math.floor(mouseY / _this.gridSize);\n\n      var shop = _this.shops.find(function (s) {\n        return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n      });\n\n      if (shop) {\n        _this.infoBoxVisible = true;\n        infoBox.style.left = event.clientX + 'px';\n        infoBox.style.top = event.clientY + 'px';\n        infoBox.textContent = shop.info;\n      } else {\n        _this.infoBoxVisible = false;\n      }\n    };\n\n    var handleMouseClick = function handleMouseClick(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / _this.gridSize);\n      var row = Math.floor(mouseY / _this.gridSize);\n\n      var shop = _this.shops.find(function (s) {\n        return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n      });\n\n      if (shop) {\n        alert(shop.info);\n      }\n    };\n\n    var draw = function draw() {\n      ctx.clearRect(0, 0, _this.canvasWidth, _this.canvasHeight);\n      drawGrid();\n      drawShops();\n      drawObstacles();\n      drawGameElements();\n      requestAnimationFrame(draw);\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('click', handleMouseClick);\n    draw();\n    this.$once('hook:beforeDestroy', function () {\n      window.removeEventListener('keydown', handleKeyPress);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('click', handleMouseClick);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAmBA;AACAA,MADA,kBACA;AACA;AACAC,sBADA;AAEAC,uBAFA;AAGAC,2BAHA;AAIAC,kBAJA;AAKAC,eALA;AAMAC,eANA;AAOAC,cACA;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OADA,EAEA;AAAAJ;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAFA,CAPA;AAWAC,kBACA;AAAAL;AAAAC;AAAA,OADA,EAEA;AAAAD;AAAAC;AAAA,OAFA,CAXA;AAeAK;AAfA;AAiBA,GAnBA;AAoBAC,SApBA,qBAoBA;AAAA;;AACA;AACA;AACA;AAEA;;AACA;AACAC;AACA,KAFA;;AAIA;AACA;;AAEA;AACAC;AACAA;;AAEA;AACAA;AACAA;AACAA;AACAA;AACA;;AAEA;AACAA;AACAA;AACAA;AACAA;AACA;AACA,KAjBA;;AAmBA;AACA;AACA;AACAA;AACAA;AACA,KALA;;AAOA;AACAA;;AACA;AACA;AACA;AACA;AACA;AACAA;AACA,OANA;AAOA,KATA;;AAWA;AACA;AACA;AACA;;AACA;AACAA;AACA,SAFA,MAEA;AACA;AACAA;AACA,WAFA;AAGA;AACA,OAVA;AAWA,KAZA;;AAcA;AACA;AAAA;AAAA;AACA,KAFA;;AAIA;AACA;AACA;;AAEA;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACAC;AACA;;AACA;AACAA;AACA;AAZA;;AAeA;AACA;AACA;AACA;AACA,KAvBA;;AAyBA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA,eACAC,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA,OAPA;;AAQA;AACA;AACAC;AACAA;AACAA;AACA,OALA,MAKA;AACA;AACA;AACA,KAxBA;;AA0BA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA,eACAF,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA,OAPA;;AAQA;AACAE;AACA;AACA,KAnBA;;AAqBA;AACAN;AACAO;AACAC;AACAC;AACAC;AACAC;AACA,KAPA;;AASAC;AACAC;AACAA;AAEAC;AAEA;AACAF;AACAC;AACAA;AACA,KAJA;AAKA;AApLA","names":["data","canvasWidth","canvasHeight","infoBoxVisible","gridSize","blockX","blockY","shops","x","y","width","height","info","obstacles","treeImage","mounted","console","ctx","newY","newX","col","row","infoBox","alert","drawGrid","drawShops","drawObstacles","drawGameElements","requestAnimationFrame","window","canvas","draw"],"sourceRoot":"src/views/front/mall","sources":["Tour.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div>\r\n        <canvas id=\"Floor1\" :width=\"canvasWidth\" :height=\"canvasHeight\"></canvas>\r\n        <div\r\n          id=\"infoBox\"\r\n          :style=\"{\r\n            position: 'absolute',\r\n            display: infoBoxVisible? 'block' : 'none',\r\n            backgroundColor: 'white',\r\n            border: '1px solid black',\r\n            padding: '5px'\r\n          }\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        canvasWidth: 800,\r\n        canvasHeight: 600,\r\n        infoBoxVisible: false,\r\n        gridSize: 20,\r\n        blockX: 1,\r\n        blockY: 1,\r\n        shops: [\r\n          { x: 5, y: 5, width: 2, height: 2, info: '这是一家服装店' },\r\n          { x: 7, y: 2, width: 1, height: 3, info: '这是一家咖啡店' }\r\n        ],\r\n        obstacles: [\r\n          { x: 3, y: 4 },\r\n          { x: 6, y: 6 }\r\n        ],\r\n        treeImage: new Image()\r\n      };\r\n    },\r\n    mounted() {\r\n      const canvas = document.getElementById('Floor1');\r\n      const ctx = canvas.getContext('2d');\r\n      const infoBox = document.getElementById('infoBox');\r\n  \r\n      this.treeImage.src = 'tree.png';\r\n      this.treeImage.onerror = () => {\r\n        console.error('树的图片加载失败');\r\n      };\r\n  \r\n      const rows = this.canvasHeight / this.gridSize;\r\n      const cols = this.canvasWidth / this.gridSize;\r\n  \r\n      const drawGrid = () => {\r\n        ctx.strokeStyle = 'gray';\r\n        ctx.lineWidth = 1;\r\n  \r\n        for (let i = 0; i <= rows; i++) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, i * this.gridSize);\r\n          ctx.lineTo(this.canvasWidth, i * this.gridSize);\r\n          ctx.stroke();\r\n        }\r\n  \r\n        for (let i = 0; i <= cols; i++) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(i * this.gridSize, 0);\r\n          ctx.lineTo(i * this.gridSize, this.canvasHeight);\r\n          ctx.stroke();\r\n        }\r\n      };\r\n  \r\n      const drawGameElements = () => {\r\n        const x = this.blockX * this.gridSize;\r\n        const y = this.blockY * this.gridSize;\r\n        ctx.fillStyle ='red';\r\n        ctx.fillRect(x, y, this.gridSize, this.gridSize);\r\n      };\r\n  \r\n      const drawShops = () => {\r\n        ctx.fillStyle = 'blue';\r\n        this.shops.forEach(shop => {\r\n          const x = shop.x * this.gridSize;\r\n          const y = shop.y * this.gridSize;\r\n          const w = shop.width * this.gridSize;\r\n          const h = shop.height * this.gridSize;\r\n          ctx.fillRect(x, y, w, h);\r\n        });\r\n      };\r\n  \r\n      const drawObstacles = () => {\r\n        this.obstacles.forEach(obstacle => {\r\n          const x = obstacle.x * this.gridSize;\r\n          const y = obstacle.y * this.gridSize;\r\n          if (this.treeImage.complete) {\r\n            ctx.drawImage(this.treeImage, x, y, this.gridSize, this.gridSize);\r\n          } else {\r\n            this.treeImage.onload = () => {\r\n              ctx.drawImage(this.treeImage, x, y, this.gridSize, this.gridSize);\r\n            };\r\n          }\r\n        });\r\n      };\r\n  \r\n      const isCollision = (x, y) => {\r\n        return this.obstacles.some(obstacle => obstacle.x === x && obstacle.y === y);\r\n      };\r\n  \r\n      const handleKeyPress = (event) => {\r\n        let newX = this.blockX;\r\n        let newY = this.blockY;\r\n  \r\n        switch (event.key) {\r\n          case 'ArrowUp':\r\n            newY--;\r\n            break;\r\n          case 'ArrowDown':\r\n            newY++;\r\n            break;\r\n          case 'ArrowLeft':\r\n            newX--;\r\n            break;\r\n          case 'ArrowRight':\r\n            newX++;\r\n            break;\r\n        }\r\n  \r\n        if (newX >= 0 && newX < cols && newY >= 0 && newY < rows &&!isCollision(newX, newY)) {\r\n          this.blockX = newX;\r\n          this.blockY = newY;\r\n        }\r\n      };\r\n  \r\n      const handleMouseMove = (event) => {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const mouseX = event.clientX - rect.left;\r\n        const mouseY = event.clientY - rect.top;\r\n  \r\n        const col = Math.floor(mouseX / this.gridSize);\r\n        const row = Math.floor(mouseY / this.gridSize);\r\n  \r\n        const shop = this.shops.find(s => {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        });\r\n        if (shop) {\r\n          this.infoBoxVisible = true;\r\n          infoBox.style.left = event.clientX + 'px';\r\n          infoBox.style.top = event.clientY + 'px';\r\n          infoBox.textContent = shop.info;\r\n        } else {\r\n          this.infoBoxVisible = false;\r\n        }\r\n      };\r\n  \r\n      const handleMouseClick = (event) => {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const mouseX = event.clientX - rect.left;\r\n        const mouseY = event.clientY - rect.top;\r\n  \r\n        const col = Math.floor(mouseX / this.gridSize);\r\n        const row = Math.floor(mouseY / this.gridSize);\r\n  \r\n        const shop = this.shops.find(s => {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        });\r\n        if (shop) {\r\n          alert(shop.info);\r\n        }\r\n      };\r\n  \r\n      const draw = () => {\r\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n        drawGrid();\r\n        drawShops();\r\n        drawObstacles();\r\n        drawGameElements();\r\n        requestAnimationFrame(draw);\r\n      };\r\n  \r\n      window.addEventListener('keydown', handleKeyPress);\r\n      canvas.addEventListener('mousemove', handleMouseMove);\r\n      canvas.addEventListener('click', handleMouseClick);\r\n  \r\n      draw();\r\n  \r\n      this.$once('hook:beforeDestroy', () => {\r\n        window.removeEventListener('keydown', handleKeyPress);\r\n        canvas.removeEventListener('mousemove', handleMouseMove);\r\n        canvas.removeEventListener('click', handleMouseClick);\r\n      });\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  canvas {\r\n    border: 1px solid black;\r\n    display: block;\r\n    margin: 0 auto;\r\n  }\r\n  </style>"]},"metadata":{},"sourceType":"module"}