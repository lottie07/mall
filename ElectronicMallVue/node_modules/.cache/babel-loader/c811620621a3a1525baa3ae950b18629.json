{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      canvasWidth: 800,\n      canvasHeight: 600,\n      infoBoxVisible: false\n    };\n  },\n  mounted: function mounted() {\n    var canvas = document.getElementById('Floor1');\n    var ctx = canvas.getContext('2d');\n    var infoBox = document.getElementById('infoBox'); // 定义网格参数 40*30\n\n    var gridSize = 20;\n    var rows = canvas.height / gridSize;\n    var cols = canvas.width / gridSize; // 定义游戏元素（方块）的初始位置\n\n    var blockX = 1;\n    var blockY = 1; // 定义店铺和障碍物的位置，同时添加店铺信息\n\n    var shops = [{\n      x: 5,\n      y: 5,\n      width: 2,\n      height: 2,\n      info: '这是一家服装店'\n    }, {\n      x: 7,\n      y: 2,\n      width: 1,\n      height: 3,\n      info: '这是一家咖啡店'\n    }];\n    var obstacles = [{\n      x: 3,\n      y: 4\n    }, {\n      x: 6,\n      y: 6\n    }]; // 加载图片\n\n    var treeImage = new Image();\n    treeImage.src = 'tree.png'; // 绘制网格\n\n    function drawGrid() {\n      ctx.strokeStyle = 'gray';\n      ctx.lineWidth = 1; // 绘制水平网格线\n\n      for (var i = 0; i <= rows; i++) {\n        ctx.beginPath();\n        ctx.moveTo(0, i * gridSize);\n        ctx.lineTo(canvas.width, i * gridSize);\n        ctx.stroke();\n      } // 绘制垂直网格线\n\n\n      for (var _i = 0; _i <= cols; _i++) {\n        ctx.beginPath();\n        ctx.moveTo(_i * gridSize, 0);\n        ctx.lineTo(_i * gridSize, canvas.height);\n        ctx.stroke();\n      }\n    } // 绘制游戏元素（方块）\n\n\n    function drawGameElements() {\n      var x = blockX * gridSize;\n      var y = blockY * gridSize;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x, y, gridSize, gridSize);\n    } // 绘制店铺\n\n\n    function drawShops() {\n      ctx.fillStyle = 'blue';\n      shops.forEach(function (shop) {\n        var x = shop.x * gridSize;\n        var y = shop.y * gridSize;\n        var w = shop.width * gridSize;\n        var h = shop.height * gridSize;\n        ctx.fillRect(x, y, w, h);\n      });\n    } // 绘制障碍物（树）\n\n\n    function drawObstacles() {\n      obstacles.forEach(function (obstacle) {\n        var x = obstacle.x * gridSize;\n        var y = obstacle.y * gridSize;\n\n        if (treeImage.complete) {\n          ctx.drawImage(treeImage, x, y, gridSize, gridSize);\n        } else {\n          treeImage.onload = function () {\n            ctx.drawImage(treeImage, x, y, gridSize, gridSize);\n          };\n        }\n      });\n    } // 检查是否碰撞到障碍物\n\n\n    function isCollision(x, y) {\n      return obstacles.some(function (obstacle) {\n        return obstacle.x === x && obstacle.y === y;\n      });\n    } // 处理键盘事件\n\n\n    function handleKeyPress(event) {\n      var newX = blockX;\n      var newY = blockY;\n\n      switch (event.key) {\n        case 'ArrowUp':\n          newY--;\n          break;\n\n        case 'ArrowDown':\n          newY++;\n          break;\n\n        case 'ArrowLeft':\n          newX--;\n          break;\n\n        case 'ArrowRight':\n          newX++;\n          break;\n      }\n\n      if (newX >= 0 && newX < cols && newY >= 0 && newY < rows && !isCollision(newX, newY)) {\n        blockX = newX;\n        blockY = newY;\n      }\n    } // 处理鼠标移动事件\n\n\n    function handleMouseMove(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / gridSize);\n      var row = Math.floor(mouseY / gridSize);\n      var shop = shops.find(function (s) {\n        return s.x === col && s.y === row;\n      });\n\n      if (shop) {\n        infoBox.style.display = 'block';\n        infoBox.style.left = event.clientX + 'px';\n        infoBox.style.top = event.clientY + 'px';\n        infoBox.textContent = shop.info;\n      } else {\n        infoBox.style.display = 'none';\n      }\n    } // 处理鼠标点击事件\n\n\n    function handleMouseClick(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / gridSize);\n      var row = Math.floor(mouseY / gridSize);\n      var shop = shops.find(function (s) {\n        return s.x === col && s.y === row;\n      });\n\n      if (shop) {\n        alert(shop.info);\n      }\n    } // 主绘制函数\n\n\n    function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawGrid();\n      drawShops();\n      drawObstacles();\n      drawGameElements();\n      requestAnimationFrame(draw);\n    } // 监听键盘事件\n\n\n    window.addEventListener('keydown', handleKeyPress); // 监听鼠标移动事件\n\n    canvas.addEventListener('mousemove', handleMouseMove); // 监听鼠标点击事件\n\n    canvas.addEventListener('click', handleMouseClick); // 开始绘制\n\n    draw();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAiBA;AACAA,MADA,kBACA;AACA;AACAC,sBADA;AAEAC,uBAFA;AAGAC;AAHA;AAKA,GAPA;AAQAC,SARA,qBAQA;AACA;AACA;AACA,qDAHA,CAKA;;AACA;AACA;AACA,uCARA,CAUA;;AACA;AACA,mBAZA,CAcA;;AACA,iBACA;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,KADA,EAEA;AAAAJ;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,KAFA;AAIA,qBACA;AAAAJ;AAAAC;AAAA,KADA,EAEA;AAAAD;AAAAC;AAAA,KAFA,EAnBA,CAwBA;;AACA;AACAI,+BA1BA,CA4BA;;AACA;AACAC;AACAA,wBAFA,CAIA;;AACA;AACAA;AACAA;AACAA;AACAA;AACA,OAVA,CAYA;;;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA,KAhDA,CAkDA;;;AACA;AACA;AACA;AACAA;AACAA;AACA,KAxDA,CA0DA;;;AACA;AACAA;AACAC;AACA;AACA;AACA;AACA;AACAD;AACA,OANA;AAOA,KApEA,CAsEA;;;AACA;AACAE;AACA;AACA;;AACA;AACAF;AACA,SAFA,MAEA;AACAD;AACAC;AACA,WAFA;AAGA;AACA,OAVA;AAWA,KAnFA,CAqFA;;;AACA;AACA;AAAA;AAAA;AACA,KAxFA,CA0FA;;;AACA;AACA;AACA;;AAEA;AACA;AACAG;AACA;;AACA;AACAA;AACA;;AACA;AACAC;AACA;;AACA;AACAA;AACA;AAZA;;AAeA;AACAC;AACAC;AACA;AACA,KAlHA,CAoHA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AACA;AACAC;AACAA;AACAA;AACAA;AACA,OALA,MAKA;AACAA;AACA;AACA,KAtIA,CAwIA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AACA;AACAC;AACA;AACA,KArJA,CAuJA;;;AACA;AACAR;AACAS;AACAC;AACAC;AACAC;AACAC;AACA,KA/JA,CAiKA;;;AACAC,uDAlKA,CAmKA;;AACAC,0DApKA,CAqKA;;AACAA,uDAtKA,CAwKA;;AACAC;AAEA;AAnLA","names":["data","canvasWidth","canvasHeight","infoBoxVisible","mounted","x","y","width","height","info","treeImage","ctx","shops","obstacles","newY","newX","blockX","blockY","infoBox","alert","drawGrid","drawShops","drawObstacles","drawGameElements","requestAnimationFrame","window","canvas","draw"],"sourceRoot":"src/views/front/mall","sources":["Floor1.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas id=\"Floor1\" :width=\"canvasWidth\" :height=\"canvasHeight\"></canvas>\r\n      <div\r\n        id=\"infoBox\"\r\n        :style=\"{\r\n          position: 'absolute',\r\n          display: infoBoxVisible? 'block' : 'none',\r\n          backgroundColor: 'white',\r\n          border: '1px solid black',\r\n          padding: '5px'\r\n        }\"\r\n      ></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        canvasWidth: 800,\r\n        canvasHeight: 600,\r\n        infoBoxVisible: false\r\n      };\r\n    },\r\n    mounted() {\r\n      const canvas = document.getElementById('Floor1');\r\n      const ctx = canvas.getContext('2d');  \r\n      const infoBox = document.getElementById('infoBox');\r\n\r\n    // 定义网格参数 40*30\r\n    const gridSize = 20;\r\n    const rows = canvas.height / gridSize;\r\n    const cols = canvas.width / gridSize;\r\n\r\n    // 定义游戏元素（方块）的初始位置\r\n    let blockX = 1;\r\n    let blockY = 1;\r\n\r\n    // 定义店铺和障碍物的位置，同时添加店铺信息\r\n    const shops = [\r\n        { x: 5, y: 5, width: 2, height: 2, info: '这是一家服装店' },\r\n        { x: 7, y: 2, width: 1, height: 3, info: '这是一家咖啡店' }\r\n    ];\r\n    const obstacles = [\r\n        { x: 3, y: 4 },\r\n        { x: 6, y: 6 }\r\n    ];\r\n\r\n// 加载图片\r\nconst treeImage = new Image();\r\ntreeImage.src = 'tree.png';\r\n\r\n// 绘制网格\r\nfunction drawGrid() {\r\n    ctx.strokeStyle = 'gray';\r\n    ctx.lineWidth = 1;\r\n\r\n    // 绘制水平网格线\r\n    for (let i = 0; i <= rows; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, i * gridSize);\r\n        ctx.lineTo(canvas.width, i * gridSize);\r\n        ctx.stroke();\r\n    }\r\n\r\n    // 绘制垂直网格线\r\n    for (let i = 0; i <= cols; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(i * gridSize, 0);\r\n        ctx.lineTo(i * gridSize, canvas.height);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n// 绘制游戏元素（方块）\r\nfunction drawGameElements() {\r\n    const x = blockX * gridSize;\r\n    const y = blockY * gridSize;\r\n    ctx.fillStyle ='red';\r\n    ctx.fillRect(x, y, gridSize, gridSize);\r\n}\r\n\r\n// 绘制店铺\r\nfunction drawShops() {\r\n    ctx.fillStyle = 'blue';\r\n    shops.forEach(shop => {\r\n        const x = shop.x * gridSize;\r\n        const y = shop.y * gridSize;\r\n        const w = shop.width * gridSize;\r\n        const h = shop.height * gridSize;\r\n        ctx.fillRect(x, y, w, h);\r\n    });\r\n}\r\n\r\n// 绘制障碍物（树）\r\nfunction drawObstacles() {\r\n    obstacles.forEach(obstacle => {\r\n        const x = obstacle.x * gridSize;\r\n        const y = obstacle.y * gridSize;\r\n        if (treeImage.complete) {\r\n            ctx.drawImage(treeImage, x, y, gridSize, gridSize);\r\n        } else {\r\n            treeImage.onload = function () {\r\n                ctx.drawImage(treeImage, x, y, gridSize, gridSize);\r\n            };\r\n        }\r\n    });\r\n}\r\n\r\n// 检查是否碰撞到障碍物\r\nfunction isCollision(x, y) {\r\n    return obstacles.some(obstacle => obstacle.x === x && obstacle.y === y);\r\n}\r\n\r\n// 处理键盘事件\r\nfunction handleKeyPress(event) {\r\n    let newX = blockX;\r\n    let newY = blockY;\r\n\r\n    switch (event.key) {\r\n        case 'ArrowUp':\r\n            newY--;\r\n            break;\r\n        case 'ArrowDown':\r\n            newY++;\r\n            break;\r\n        case 'ArrowLeft':\r\n            newX--;\r\n            break;\r\n        case 'ArrowRight':\r\n            newX++;\r\n            break;\r\n    }\r\n\r\n    if (newX >= 0 && newX < cols && newY >= 0 && newY < rows &&!isCollision(newX, newY)) {\r\n        blockX = newX;\r\n        blockY = newY;\r\n    }\r\n}\r\n\r\n// 处理鼠标移动事件\r\nfunction handleMouseMove(event) {\r\n    const rect = canvas.getBoundingClientRect();\r\n    const mouseX = event.clientX - rect.left;\r\n    const mouseY = event.clientY - rect.top;\r\n\r\n    const col = Math.floor(mouseX / gridSize);\r\n    const row = Math.floor(mouseY / gridSize);\r\n\r\n    const shop = shops.find(s => s.x === col && s.y === row);\r\n    if (shop) {\r\n        infoBox.style.display = 'block';\r\n        infoBox.style.left = event.clientX + 'px';\r\n        infoBox.style.top = event.clientY + 'px';\r\n        infoBox.textContent = shop.info;\r\n    } else {\r\n        infoBox.style.display = 'none';\r\n    }\r\n}\r\n\r\n// 处理鼠标点击事件\r\nfunction handleMouseClick(event) {\r\n    const rect = canvas.getBoundingClientRect();\r\n    const mouseX = event.clientX - rect.left;\r\n    const mouseY = event.clientY - rect.top;\r\n\r\n    const col = Math.floor(mouseX / gridSize);\r\n    const row = Math.floor(mouseY / gridSize);\r\n\r\n    const shop = shops.find(s => s.x === col && s.y === row);\r\n    if (shop) {\r\n        alert(shop.info);\r\n    }\r\n}\r\n\r\n// 主绘制函数\r\nfunction draw() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    drawGrid();\r\n    drawShops();\r\n    drawObstacles();\r\n    drawGameElements();\r\n    requestAnimationFrame(draw);\r\n}\r\n\r\n// 监听键盘事件\r\nwindow.addEventListener('keydown', handleKeyPress);\r\n// 监听鼠标移动事件\r\ncanvas.addEventListener('mousemove', handleMouseMove);\r\n// 监听鼠标点击事件\r\ncanvas.addEventListener('click', handleMouseClick);\r\n\r\n// 开始绘制\r\ndraw();\r\n    \r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  canvas {\r\n    border: 1px solid black;\r\n    display: block;\r\n    margin: 0 auto;\r\n  }\r\n  </style>"]},"metadata":{},"sourceType":"module"}