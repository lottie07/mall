{"ast":null,"code":"import _objectSpread from \"D:/Workspace/graduation_project/ElectronicMall/ElectronicMallVue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\n// src/components/FloorPlan/canvasRenderer/utils.js\n\n/**\r\n * 坐标转换工具\r\n * @param {number} clientX - 鼠标X坐标\r\n * @param {number} clientY - 鼠标Y坐标\r\n * @param {DOMRect} canvasRect - Canvas的getBoundingClientRect()结果\r\n * @param {number} gridSize - 网格尺寸\r\n * @returns {{gridX: number, gridY: number}} 网格坐标\r\n */\nexport function clientToGrid(clientX, clientY, canvasRect, gridSize) {\n  return {\n    gridX: Math.floor((clientX - canvasRect.left) / gridSize),\n    gridY: Math.floor((clientY - canvasRect.top) / gridSize)\n  };\n}\n/**\r\n * 碰撞检测\r\n * @param {number} x - 待检测X坐标\r\n * @param {number} y - 待检测Y坐标\r\n * @param {Array<{x: number, y: number}>} obstacles - 障碍物数组\r\n * @returns {boolean} 是否发生碰撞\r\n */\n\nexport function checkCollision(x, y, obstacles) {\n  return obstacles.some(function (obs) {\n    return obs.x === x && obs.y === y;\n  });\n}\n/**\r\n * 坐标合法性验证\r\n * @param {number} x - X坐标\r\n * @param {number} y - Y坐标\r\n * @param {number} cols - 总列数（根据canvasWidth/gridSize计算）\r\n * @param {number} rows - 总行数（根据canvasHeight/gridSize计算）\r\n * @returns {boolean} 是否合法坐标\r\n */\n\nexport function isValidPosition(x, y, cols, rows) {\n  return x >= 0 && x < cols && y >= 0 && y < rows;\n}\n/**\r\n * 获取当前悬停的店铺\r\n * @param {number} gridX - 网格X坐标\r\n * @param {number} gridY - 网格Y坐标\r\n * @param {Array} shops - 当前楼层店铺数据\r\n * @returns {Object|null} 匹配的店铺对象\r\n */\n\nexport function getHoveredShop(gridX, gridY, shops) {\n  return shops.find(function (shop) {\n    var xEnd = shop.x + shop.width;\n    var yEnd = shop.y + shop.height;\n    return gridX >= shop.x && gridX < xEnd && gridY >= shop.y && gridY < yEnd;\n  });\n}\n/**\r\n * 电梯位置检测\r\n * @param {number} x - 玩家X坐标\r\n * @param {number} y - 玩家Y坐标\r\n * @param {Array} shops - 当前楼层店铺数据\r\n * @returns {boolean} 是否在电梯区域\r\n */\n\nexport function checkElevatorPosition(x, y, shops) {\n  var elevator = shops.find(function (s) {\n    return s.shape === 'elevator';\n  });\n  if (!elevator) return false;\n  return x >= elevator.x && x < elevator.x + elevator.width && y >= elevator.y && y < elevator.y + elevator.height;\n}\n/**\r\n * 动画节流函数\r\n * @param {Function} fn - 需要节流的函数\r\n * @param {number} delay - 延迟时间(ms)\r\n * @returns {Function} 节流后的函数\r\n */\n\nexport function throttleAnimation(fn) {\n  var _this = this;\n\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var lastCall = 0;\n  return function () {\n    var now = Date.now();\n\n    if (now - lastCall >= delay) {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      fn.apply(_this, args);\n      lastCall = now;\n    }\n  };\n}\n/**\r\n * 生成店铺形状映射\r\n * @param {Array} shops - 原始店铺数据\r\n * @returns {Array} 带shape属性的店铺数据\r\n */\n\nexport function generateShopShapes(shops) {\n  return shops.map(function (shop) {\n    return _objectSpread(_objectSpread({}, shop), {}, {\n      shape: getShopShape(shop)\n    });\n  });\n} // 内部使用的形状判断逻辑\n\nfunction getShopShape(shop) {\n  if (shop.type === 'elevator') return 'elevator';\n  if (shop.width > 3) return 'rect';\n  return shop.shape || 'invertedHouse'; // 优先使用数据中的shape字段\n}","map":{"version":3,"sources":["D:/Workspace/graduation_project/ElectronicMall/ElectronicMallVue/src/views/front/mall/canvasRenderer/utils.js"],"names":["clientToGrid","clientX","clientY","canvasRect","gridSize","gridX","Math","floor","left","gridY","top","checkCollision","x","y","obstacles","some","obs","isValidPosition","cols","rows","getHoveredShop","shops","find","shop","xEnd","width","yEnd","height","checkElevatorPosition","elevator","s","shape","throttleAnimation","fn","delay","lastCall","now","Date","args","apply","generateShopShapes","map","getShopShape","type"],"mappings":"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","sourcesContent":["// src/components/FloorPlan/canvasRenderer/utils.js\r\n\r\n/**\r\n * 坐标转换工具\r\n * @param {number} clientX - 鼠标X坐标\r\n * @param {number} clientY - 鼠标Y坐标\r\n * @param {DOMRect} canvasRect - Canvas的getBoundingClientRect()结果\r\n * @param {number} gridSize - 网格尺寸\r\n * @returns {{gridX: number, gridY: number}} 网格坐标\r\n */\r\nexport function clientToGrid(clientX, clientY, canvasRect, gridSize) {\r\n    return {\r\n      gridX: Math.floor((clientX - canvasRect.left) / gridSize),\r\n      gridY: Math.floor((clientY - canvasRect.top) / gridSize)\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 碰撞检测\r\n   * @param {number} x - 待检测X坐标\r\n   * @param {number} y - 待检测Y坐标\r\n   * @param {Array<{x: number, y: number}>} obstacles - 障碍物数组\r\n   * @returns {boolean} 是否发生碰撞\r\n   */\r\n  export function checkCollision(x, y, obstacles) {\r\n    return obstacles.some(obs => obs.x === x && obs.y === y);\r\n  }\r\n  \r\n  /**\r\n   * 坐标合法性验证\r\n   * @param {number} x - X坐标\r\n   * @param {number} y - Y坐标\r\n   * @param {number} cols - 总列数（根据canvasWidth/gridSize计算）\r\n   * @param {number} rows - 总行数（根据canvasHeight/gridSize计算）\r\n   * @returns {boolean} 是否合法坐标\r\n   */\r\n  export function isValidPosition(x, y, cols, rows) {\r\n    return x >= 0 && x < cols && y >= 0 && y < rows;\r\n  }\r\n  \r\n  /**\r\n   * 获取当前悬停的店铺\r\n   * @param {number} gridX - 网格X坐标\r\n   * @param {number} gridY - 网格Y坐标\r\n   * @param {Array} shops - 当前楼层店铺数据\r\n   * @returns {Object|null} 匹配的店铺对象\r\n   */\r\n  export function getHoveredShop(gridX, gridY, shops) {\r\n    return shops.find(shop => {\r\n      const xEnd = shop.x + shop.width;\r\n      const yEnd = shop.y + shop.height;\r\n      return gridX >= shop.x && gridX < xEnd && gridY >= shop.y && gridY < yEnd;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 电梯位置检测\r\n   * @param {number} x - 玩家X坐标\r\n   * @param {number} y - 玩家Y坐标\r\n   * @param {Array} shops - 当前楼层店铺数据\r\n   * @returns {boolean} 是否在电梯区域\r\n   */\r\n  export function checkElevatorPosition(x, y, shops) {\r\n    const elevator = shops.find(s => s.shape === 'elevator');\r\n    if (!elevator) return false;\r\n  \r\n    return (\r\n      x >= elevator.x &&\r\n      x < elevator.x + elevator.width &&\r\n      y >= elevator.y &&\r\n      y < elevator.y + elevator.height\r\n    );\r\n  }\r\n  \r\n  /**\r\n   * 动画节流函数\r\n   * @param {Function} fn - 需要节流的函数\r\n   * @param {number} delay - 延迟时间(ms)\r\n   * @returns {Function} 节流后的函数\r\n   */\r\n  export function throttleAnimation(fn, delay = 100) {\r\n    let lastCall = 0;\r\n    return (...args) => {\r\n      const now = Date.now();\r\n      if (now - lastCall >= delay) {\r\n        fn.apply(this, args);\r\n        lastCall = now;\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 生成店铺形状映射\r\n   * @param {Array} shops - 原始店铺数据\r\n   * @returns {Array} 带shape属性的店铺数据\r\n   */\r\n  export function generateShopShapes(shops) {\r\n    return shops.map(shop => ({\r\n      ...shop,\r\n      shape: getShopShape(shop)\r\n    }));\r\n  }\r\n  \r\n  // 内部使用的形状判断逻辑\r\n  function getShopShape(shop) {\r\n    if (shop.type === 'elevator') return 'elevator';\r\n    if (shop.width > 3) return 'rect';\r\n    return shop.shape || 'invertedHouse'; // 优先使用数据中的shape字段\r\n  }"]},"metadata":{},"sourceType":"module"}