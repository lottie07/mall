{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      canvasWidth: 1300,\n      canvasHeight: 560,\n      infoBoxVisible: false,\n      gridSize: 20,\n      blockX: 0,\n      blockY: 0,\n      currentFloor: '一楼',\n      currentFloorShops: [],\n      currentFloorObstacles: [],\n      // 一楼楼层地图数据\n      firstFloorShops: [{\n        x: 2,\n        y: 0,\n        width: 9,\n        height: 5,\n        info: '优衣库',\n        shape: 'rect'\n      }, {\n        x: 2,\n        y: 5,\n        width: 3,\n        height: 4,\n        info: '店铺1',\n        shape: 'invertedHouse'\n      }, {\n        x: 5,\n        y: 5,\n        width: 3,\n        height: 4,\n        info: '店铺2',\n        shape: 'invertedHouse'\n      }, {\n        x: 8,\n        y: 5,\n        width: 3,\n        height: 4,\n        info: '店铺3',\n        shape: 'invertedHouse'\n      }, {\n        x: 3,\n        y: 11,\n        width: 3,\n        height: 3,\n        info: '店铺',\n        shape: 'rect'\n      }, {\n        x: 6,\n        y: 12,\n        width: 3,\n        height: 2,\n        info: '店铺',\n        shape: 'rect'\n      }, {\n        x: 10,\n        y: 10,\n        width: 2,\n        height: 2,\n        info: '电梯',\n        shape: 'elevator'\n      }],\n      firstFloorObstacles: [{\n        x: 3,\n        y: 11\n      }, {\n        x: 5,\n        y: 13\n      }],\n      // 二楼楼层地图数据\n      secondFloorShops: [{\n        x: 3,\n        y: 2,\n        width: 5,\n        height: 4,\n        info: '2f 店铺1',\n        shape: 'rect'\n      }, {\n        x: 7,\n        y: 3,\n        width: 4,\n        height: 3,\n        info: '2f 店铺2',\n        shape: 'invertedHouse'\n      }, {\n        x: 12,\n        y: 1,\n        width: 2,\n        height: 2,\n        info: '2f 电梯',\n        shape: 'elevator'\n      }],\n      secondFloorObstacles: [{\n        x: 4,\n        y: 5\n      }, {\n        x: 9,\n        y: 2\n      }],\n      treeImage: new Image()\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.currentFloorShops = this.firstFloorShops;\n    this.currentFloorObstacles = this.firstFloorObstacles;\n    var canvas = document.getElementById('Floor1');\n    var ctx = canvas.getContext('2d');\n    var infoBox = document.getElementById('infoBox');\n    this.treeImage.src = require('./Resources/tree.png');\n\n    this.treeImage.onerror = function () {\n      console.error('树的图片加载失败');\n    };\n\n    var rows = this.canvasHeight / this.gridSize;\n    var cols = this.canvasWidth / this.gridSize;\n\n    var drawGrid = function drawGrid() {\n      ctx.strokeStyle = 'gray';\n      ctx.lineWidth = 1;\n\n      for (var i = 0; i <= rows; i++) {\n        ctx.beginPath();\n        ctx.moveTo(0, i * _this.gridSize);\n        ctx.lineTo(_this.canvasWidth, i * _this.gridSize);\n        ctx.stroke();\n      }\n\n      for (var _i = 0; _i <= cols; _i++) {\n        ctx.beginPath();\n        ctx.moveTo(_i * _this.gridSize, 0);\n        ctx.lineTo(_i * _this.gridSize, _this.canvasHeight);\n        ctx.stroke();\n      }\n    };\n\n    var drawGameElements = function drawGameElements() {\n      var x = _this.blockX * _this.gridSize;\n      var y = _this.blockY * _this.gridSize;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x, y, _this.gridSize, _this.gridSize);\n    };\n\n    var drawShops = function drawShops() {\n      if (!_this.currentFloorShops) return;\n\n      _this.currentFloorShops.forEach(function (shop) {\n        var x = shop.x * _this.gridSize;\n        var y = shop.y * _this.gridSize;\n        ctx.fillStyle = '#999999';\n\n        if (shop.shape === 'rect') {\n          var w = shop.width * _this.gridSize;\n          var h = shop.height * _this.gridSize;\n          ctx.fillRect(x, y, w, h);\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 1;\n          ctx.strokeRect(x, y, w, h);\n        } else if (shop.shape === 'triangle') {\n          ctx.beginPath();\n          ctx.moveTo(x + _this.gridSize / 2, y);\n          ctx.lineTo(x, y + _this.gridSize);\n          ctx.lineTo(x + _this.gridSize, y + _this.gridSize);\n          ctx.closePath();\n          ctx.fill();\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        } else if (shop.shape === 'trapezoid') {\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + shop.width * _this.gridSize, y);\n          ctx.lineTo(x + (shop.width * _this.gridSize - _this.gridSize / 2), y + shop.height * _this.gridSize);\n          ctx.lineTo(x + _this.gridSize / 2, y + shop.height * _this.gridSize);\n          ctx.closePath();\n          ctx.fill();\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        } else if (shop.shape === 'invertedHouse') {\n          var houseWidth = shop.width * _this.gridSize;\n          var houseHeight = shop.height * _this.gridSize;\n          ctx.fillRect(x, y, houseWidth, houseHeight / 2);\n          ctx.beginPath();\n          ctx.moveTo(x, y + houseHeight / 2);\n          ctx.lineTo(x + houseWidth / 2, y + houseHeight);\n          ctx.lineTo(x + houseWidth, y + houseHeight / 2);\n          ctx.closePath();\n          ctx.fill();\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 1;\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + houseWidth, y);\n          ctx.lineTo(x + houseWidth, y + houseHeight / 2);\n          ctx.lineTo(x + houseWidth / 2, y + houseHeight);\n          ctx.lineTo(x, y + houseHeight / 2);\n          ctx.closePath();\n          ctx.stroke();\n        } else if (shop.shape === 'elevator') {\n          var _w = shop.width * _this.gridSize;\n\n          var _h = shop.height * _this.gridSize;\n\n          ctx.fillStyle = '#0099ff';\n          ctx.fillRect(x, y, _w, _h);\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 1;\n          ctx.strokeRect(x, y, _w, _h);\n        }\n      });\n    };\n\n    var drawObstacles = function drawObstacles() {\n      if (!_this.currentFloorObstacles) return;\n\n      _this.currentFloorObstacles.forEach(function (obstacle) {\n        var x = obstacle.x * _this.gridSize;\n        var y = obstacle.y * _this.gridSize;\n\n        if (_this.treeImage.complete) {\n          ctx.drawImage(_this.treeImage, x, y, _this.gridSize, _this.gridSize);\n        } else {\n          _this.treeImage.onload = function () {\n            ctx.drawImage(_this.treeImage, x, y, _this.gridSize, _this.gridSize);\n          };\n        }\n      });\n    };\n\n    var isCollision = function isCollision(x, y) {\n      if (!_this.currentFloorObstacles) return false;\n      return _this.currentFloorObstacles.some(function (obstacle) {\n        return obstacle.x === x && obstacle.y === y;\n      });\n    };\n\n    var handleKeyPress = function handleKeyPress(event) {\n      var newX = _this.blockX;\n      var newY = _this.blockY;\n\n      switch (event.key) {\n        case 'ArrowUp':\n          newY--;\n          break;\n\n        case 'ArrowDown':\n          newY++;\n          break;\n\n        case 'ArrowLeft':\n          newX--;\n          break;\n\n        case 'ArrowRight':\n          newX++;\n          break;\n\n        case 'Enter':\n          if (!_this.currentFloorShops) return;\n\n          var elevator = _this.currentFloorShops.find(function (s) {\n            return s.shape === 'elevator';\n          });\n\n          if (elevator && _this.blockX >= elevator.x && _this.blockX < elevator.x + elevator.width && _this.blockY >= elevator.y && _this.blockY < elevator.y + elevator.height) {\n            if (_this.currentFloor === '一楼') {\n              loadSecondFloor();\n            } else if (_this.currentFloor === '二楼') {\n              loadFirstFloor();\n            }\n          }\n\n          break;\n      }\n\n      if (newX >= 0 && newX < cols && newY >= 0 && newY < rows && !isCollision(newX, newY)) {\n        _this.blockX = newX;\n        _this.blockY = newY;\n      }\n    };\n\n    var handleMouseMove = function handleMouseMove(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / _this.gridSize);\n      var row = Math.floor(mouseY / _this.gridSize);\n\n      if (!_this.currentFloorShops) {\n        _this.infoBoxVisible = false;\n        return;\n      }\n\n      var shop = _this.currentFloorShops.find(function (s) {\n        if (s.shape === 'elevator') {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        } else {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        }\n      });\n\n      _this.infoBoxVisible = !!shop;\n\n      if (shop) {\n        infoBox.style.left = event.clientX + 'px';\n        infoBox.style.top = event.clientY + 'px';\n        infoBox.textContent = shop.info;\n      }\n    };\n\n    var handleMouseClick = function handleMouseClick(event) {\n      var rect = canvas.getBoundingClientRect();\n      var mouseX = event.clientX - rect.left;\n      var mouseY = event.clientY - rect.top;\n      var col = Math.floor(mouseX / _this.gridSize);\n      var row = Math.floor(mouseY / _this.gridSize);\n      if (!_this.currentFloorShops) return;\n\n      var shop = _this.currentFloorShops.find(function (s) {\n        if (s.shape === 'elevator') {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        } else {\n          return col >= s.x && col < s.x + s.width && row >= s.y && row < s.y + s.height;\n        }\n      });\n\n      if (shop) {\n        alert(shop.info);\n      }\n    };\n\n    var draw = function draw() {\n      ctx.clearRect(0, 0, _this.canvasWidth, _this.canvasHeight);\n      drawGrid();\n      drawShops();\n      drawObstacles();\n      drawGameElements();\n      requestAnimationFrame(draw);\n    };\n\n    var loadSecondFloor = function loadSecondFloor() {\n      _this.currentFloorShops = _this.secondFloorShops;\n      _this.currentFloorObstacles = _this.secondFloorObstacles;\n      _this.blockX = 0;\n      _this.blockY = 0;\n      _this.currentFloor = '二楼';\n      draw();\n    };\n\n    var loadFirstFloor = function loadFirstFloor() {\n      _this.currentFloorShops = _this.firstFloorShops;\n      _this.currentFloorObstacles = _this.firstFloorObstacles;\n      _this.blockX = 0;\n      _this.blockY = 0;\n      _this.currentFloor = '一楼';\n      draw();\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('click', handleMouseClick);\n    draw();\n    this.$once('hook:beforeDestroy', function () {\n      window.removeEventListener('keydown', handleKeyPress);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('click', handleMouseClick);\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBA;AACAA,MADA,kBACA;AACA;AACAC,uBADA;AAEAC,uBAFA;AAGAC,2BAHA;AAIAC,kBAJA;AAKAC,eALA;AAMAC,eANA;AAOAC,wBAPA;AAQAC,2BARA;AASAC,+BATA;AAUA;AACAC,wBACA;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OADA,EAEA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAFA,EAGA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAHA,EAIA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAJA,EAKA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OALA,EAMA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OANA,EAOA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAPA,CAXA;AAoBAC,4BACA;AAAAN;AAAAC;AAAA,OADA,EAEA;AAAAD;AAAAC;AAAA,OAFA,CApBA;AAwBA;AACAM,yBACA;AAAAP;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OADA,EAEA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAFA,EAGA;AAAAL;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA,OAHA,CAzBA;AA8BAG,6BACA;AAAAR;AAAAC;AAAA,OADA,EAEA;AAAAD;AAAAC;AAAA,OAFA,CA9BA;AAkCAQ;AAlCA;AAoCA,GAtCA;AAuCAC,SAvCA,qBAuCA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACAC;AACA,KAFA;;AAIA;AACA;;AAEA;AACAC;AACAA;;AAEA;AACAA;AACAA;AACAA;AACAA;AACA;;AAEA;AACAA;AACAA;AACAA;AACAA;AACA;AACA,KAjBA;;AAmBA;AACA;AACA;AACAA;AACAA;AACA,KALA;;AAOA;AACA;;AAEA;AACA;AACA;AACAA;;AACA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACA,SAPA,MAOA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,SAVA,MAUA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,SAXA,MAWA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,SApBA,MAoBA;AACA;;AACA;;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AACA,OA7DA;AA8DA,KAjEA;;AAmEA;AACA;;AAEA;AACA;AACA;;AACA;AACAA;AACA,SAFA,MAEA;AACA;AACAA;AACA,WAFA;AAGA;AACA,OAVA;AAWA,KAdA;;AAgBA;AACA;AAEA;AAAA;AAAA;AACA,KAJA;;AAMA;AACA;AACA;;AAEA;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACA;;AAEA;AAAA;AAAA;;AACA,0BACA,0BADA,IAEA,0CAFA,IAGA,0BAHA,IAIA,2CAJA,EAKA;AACA;AACAC;AACA,aAFA,MAEA;AACAC;AACA;AACA;;AACA;AA7BA;;AAgCA;AACA;AACA;AACA;AACA,KAxCA;;AA0CA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBACAC,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA,SAPA,MAOA;AACA,iBACAD,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA;AACA,OAhBA;;AAiBA;;AACA;AACAC;AACAA;AACAA;AACA;AACA,KApCA;;AAsCA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA,iBACAF,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA,SAPA,MAOA;AACA,iBACAD,cACAA,mBADA,IAEAC,UAFA,IAGAA,oBAJA;AAMA;AACA,OAhBA;;AAiBA;AACAE;AACA;AACA,KA9BA;;AAgCA;AACAR;AACAS;AACAC;AACAC;AACAC;AACAC;AACA,KAPA;;AASA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA,KAPA;;AASA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA,KAPA;;AASAC;AACAC;AACAA;AAEAF;AAEA;AACAC;AACAC;AACAA;AACA,KAJA;AAKA;AAhUA","names":["data","canvasWidth","canvasHeight","infoBoxVisible","gridSize","blockX","blockY","currentFloor","currentFloorShops","currentFloorObstacles","firstFloorShops","x","y","width","height","info","shape","firstFloorObstacles","secondFloorShops","secondFloorObstacles","treeImage","mounted","console","ctx","newY","newX","loadSecondFloor","loadFirstFloor","col","row","infoBox","alert","drawGrid","drawShops","drawObstacles","drawGameElements","requestAnimationFrame","draw","window","canvas"],"sourceRoot":"src/views/front/mall","sources":["Tour.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"floor-info\">当前楼层: {{ currentFloor }}</div>\r\n    <div>\r\n      <canvas id=\"Floor1\" :width=\"canvasWidth\" :height=\"canvasHeight\"></canvas>\r\n      <div\r\n        id=\"infoBox\"\r\n        :style=\"{\r\n          position: 'absolute',\r\n          display: infoBoxVisible? 'block' : 'none',\r\n          backgroundColor: 'white',\r\n          border: '1px solid black',\r\n          padding: '5px'\r\n        }\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      canvasWidth: 1300,\r\n      canvasHeight: 560,\r\n      infoBoxVisible: false,\r\n      gridSize: 20,\r\n      blockX: 0,\r\n      blockY: 0,\r\n      currentFloor: '一楼',\r\n      currentFloorShops: [],\r\n      currentFloorObstacles: [],\r\n      // 一楼楼层地图数据\r\n      firstFloorShops: [\r\n        { x: 2, y: 0, width: 9, height: 5, info: '优衣库', shape: 'rect' },\r\n        { x: 2, y: 5, width: 3, height: 4, info: '店铺1', shape: 'invertedHouse' },\r\n        { x: 5, y: 5, width: 3, height: 4, info: '店铺2', shape: 'invertedHouse' },\r\n        { x: 8, y: 5, width: 3, height: 4, info: '店铺3', shape: 'invertedHouse' },\r\n        { x: 3, y: 11, width: 3, height: 3, info: '店铺', shape: 'rect' },\r\n        { x: 6, y: 12, width: 3, height: 2, info: '店铺', shape: 'rect' },\r\n        { x: 10, y: 10, width: 2, height: 2, info: '电梯', shape: 'elevator' }\r\n      ],\r\n      firstFloorObstacles: [\r\n        { x: 3, y: 11 },\r\n        { x: 5, y: 13 }\r\n      ],\r\n      // 二楼楼层地图数据\r\n      secondFloorShops: [\r\n        { x: 3, y: 2, width: 5, height: 4, info: '2f 店铺1', shape: 'rect' },\r\n        { x: 7, y: 3, width: 4, height: 3, info: '2f 店铺2', shape: 'invertedHouse' },\r\n        { x: 12, y: 1, width: 2, height: 2, info: '2f 电梯', shape: 'elevator' }\r\n      ],\r\n      secondFloorObstacles: [\r\n        { x: 4, y: 5 },\r\n        { x: 9, y: 2 }\r\n      ],\r\n      treeImage: new Image()\r\n    };\r\n  },\r\n  mounted() {\r\n    this.currentFloorShops = this.firstFloorShops;\r\n    this.currentFloorObstacles = this.firstFloorObstacles;\r\n\r\n    const canvas = document.getElementById('Floor1');\r\n    const ctx = canvas.getContext('2d');\r\n    const infoBox = document.getElementById('infoBox');\r\n\r\n    this.treeImage.src = require('./Resources/tree.png');\r\n    this.treeImage.onerror = () => {\r\n      console.error('树的图片加载失败');\r\n    };\r\n\r\n    const rows = this.canvasHeight / this.gridSize;\r\n    const cols = this.canvasWidth / this.gridSize;\r\n\r\n    const drawGrid = () => {\r\n      ctx.strokeStyle = 'gray';\r\n      ctx.lineWidth = 1;\r\n\r\n      for (let i = 0; i <= rows; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, i * this.gridSize);\r\n        ctx.lineTo(this.canvasWidth, i * this.gridSize);\r\n        ctx.stroke();\r\n      }\r\n\r\n      for (let i = 0; i <= cols; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(i * this.gridSize, 0);\r\n        ctx.lineTo(i * this.gridSize, this.canvasHeight);\r\n        ctx.stroke();\r\n      }\r\n    };\r\n\r\n    const drawGameElements = () => {\r\n      const x = this.blockX * this.gridSize;\r\n      const y = this.blockY * this.gridSize;\r\n      ctx.fillStyle ='red';\r\n      ctx.fillRect(x, y, this.gridSize, this.gridSize);\r\n    };\r\n\r\n    const drawShops = () => {\r\n      if (!this.currentFloorShops) return;\r\n      \r\n      this.currentFloorShops.forEach(shop => {\r\n        const x = shop.x * this.gridSize;\r\n        const y = shop.y * this.gridSize;\r\n        ctx.fillStyle = '#999999';\r\n        if (shop.shape ==='rect') {\r\n          const w = shop.width * this.gridSize;\r\n          const h = shop.height * this.gridSize;\r\n          ctx.fillRect(x, y, w, h);\r\n          ctx.strokeStyle = 'black';\r\n          ctx.lineWidth = 1;\r\n          ctx.strokeRect(x, y, w, h);\r\n        } else if (shop.shape === 'triangle') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(x + this.gridSize / 2, y);\r\n          ctx.lineTo(x, y + this.gridSize);\r\n          ctx.lineTo(x + this.gridSize, y + this.gridSize);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          ctx.strokeStyle = 'black';\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        } else if (shop.shape === 'trapezoid') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y);\r\n          ctx.lineTo(x + shop.width * this.gridSize, y);\r\n          ctx.lineTo(x + (shop.width * this.gridSize - this.gridSize / 2), y + shop.height * this.gridSize);\r\n          ctx.lineTo(x + this.gridSize / 2, y + shop.height * this.gridSize);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          ctx.strokeStyle = 'black';\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        } else if (shop.shape === 'invertedHouse') {\r\n          const houseWidth = shop.width * this.gridSize;\r\n          const houseHeight = shop.height * this.gridSize;\r\n          ctx.fillRect(x, y, houseWidth, houseHeight / 2);\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y + houseHeight / 2);\r\n          ctx.lineTo(x + houseWidth / 2, y + houseHeight);\r\n          ctx.lineTo(x + houseWidth, y + houseHeight / 2);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          ctx.strokeStyle = 'black';\r\n          ctx.lineWidth = 1;\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y);\r\n          ctx.lineTo(x + houseWidth, y);\r\n          ctx.lineTo(x + houseWidth, y + houseHeight / 2);\r\n          ctx.lineTo(x + houseWidth / 2, y + houseHeight);\r\n          ctx.lineTo(x, y + houseHeight / 2);\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        } else if (shop.shape === 'elevator') {\r\n          const w = shop.width * this.gridSize;\r\n          const h = shop.height * this.gridSize;\r\n          ctx.fillStyle = '#0099ff';\r\n          ctx.fillRect(x, y, w, h);\r\n          ctx.strokeStyle = 'black';\r\n          ctx.lineWidth = 1;\r\n          ctx.strokeRect(x, y, w, h);\r\n        }\r\n      });\r\n    };\r\n\r\n    const drawObstacles = () => {\r\n      if (!this.currentFloorObstacles) return;\r\n      \r\n      this.currentFloorObstacles.forEach(obstacle => {\r\n        const x = obstacle.x * this.gridSize;\r\n        const y = obstacle.y * this.gridSize;\r\n        if (this.treeImage.complete) {\r\n          ctx.drawImage(this.treeImage, x, y, this.gridSize, this.gridSize);\r\n        } else {\r\n          this.treeImage.onload = () => {\r\n            ctx.drawImage(this.treeImage, x, y, this.gridSize, this.gridSize);\r\n          };\r\n        }\r\n      });\r\n    };\r\n\r\n    const isCollision = (x, y) => {\r\n      if (!this.currentFloorObstacles) return false;\r\n      \r\n      return this.currentFloorObstacles.some(obstacle => obstacle.x === x && obstacle.y === y);\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n      let newX = this.blockX;\r\n      let newY = this.blockY;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          newY--;\r\n          break;\r\n        case 'ArrowDown':\r\n          newY++;\r\n          break;\r\n        case 'ArrowLeft':\r\n          newX--;\r\n          break;\r\n        case 'ArrowRight':\r\n          newX++;\r\n          break;\r\n        case 'Enter':\r\n          if (!this.currentFloorShops) return;\r\n          \r\n          const elevator = this.currentFloorShops.find(s => s.shape === 'elevator');\r\n          if (elevator && \r\n              this.blockX >= elevator.x &&\r\n              this.blockX < elevator.x + elevator.width &&\r\n              this.blockY >= elevator.y &&\r\n              this.blockY < elevator.y + elevator.height\r\n          ) {\r\n            if (this.currentFloor === '一楼') {\r\n              loadSecondFloor();\r\n            } else if (this.currentFloor === '二楼') {\r\n              loadFirstFloor();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (newX >= 0 && newX < cols && newY >= 0 && newY < rows &&!isCollision(newX, newY)) {\r\n        this.blockX = newX;\r\n        this.blockY = newY;\r\n      }\r\n    };\r\n\r\n    const handleMouseMove = (event) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const mouseX = event.clientX - rect.left;\r\n      const mouseY = event.clientY - rect.top;\r\n\r\n      const col = Math.floor(mouseX / this.gridSize);\r\n      const row = Math.floor(mouseY / this.gridSize);\r\n\r\n      if (!this.currentFloorShops) {\r\n        this.infoBoxVisible = false;\r\n        return;\r\n      }\r\n      \r\n      const shop = this.currentFloorShops.find(s => {\r\n        if (s.shape === 'elevator') {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        } else {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        }\r\n      });\r\n      this.infoBoxVisible = !!shop;\r\n      if (shop) {\r\n        infoBox.style.left = event.clientX + 'px';\r\n        infoBox.style.top = event.clientY + 'px';\r\n        infoBox.textContent = shop.info;\r\n      }\r\n    };\r\n\r\n    const handleMouseClick = (event) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const mouseX = event.clientX - rect.left;\r\n      const mouseY = event.clientY - rect.top;\r\n\r\n      const col = Math.floor(mouseX / this.gridSize);\r\n      const row = Math.floor(mouseY / this.gridSize);\r\n\r\n      if (!this.currentFloorShops) return;\r\n      \r\n      const shop = this.currentFloorShops.find(s => {\r\n        if (s.shape === 'elevator') {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        } else {\r\n          return (\r\n            col >= s.x &&\r\n            col < s.x + s.width &&\r\n            row >= s.y &&\r\n            row < s.y + s.height\r\n          );\r\n        }\r\n      });\r\n      if (shop) {\r\n        alert(shop.info);\r\n      }\r\n    };\r\n\r\n    const draw = () => {\r\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n      drawGrid();\r\n      drawShops();\r\n      drawObstacles();\r\n      drawGameElements();\r\n      requestAnimationFrame(draw);\r\n    };\r\n\r\n    const loadSecondFloor = () => {\r\n      this.currentFloorShops = this.secondFloorShops;\r\n      this.currentFloorObstacles = this.secondFloorObstacles;\r\n      this.blockX = 0;\r\n      this.blockY = 0;\r\n      this.currentFloor = '二楼';\r\n      draw();\r\n    };\r\n\r\n    const loadFirstFloor = () => {\r\n      this.currentFloorShops = this.firstFloorShops;\r\n      this.currentFloorObstacles = this.firstFloorObstacles;\r\n      this.blockX = 0;\r\n      this.blockY = 0;\r\n      this.currentFloor = '一楼';\r\n      draw();\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    canvas.addEventListener('mousemove', handleMouseMove);\r\n    canvas.addEventListener('click', handleMouseClick);\r\n\r\n    draw();\r\n\r\n    this.$once('hook:beforeDestroy', () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n      canvas.removeEventListener('mousemove', handleMouseMove);\r\n      canvas.removeEventListener('click', handleMouseClick);\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  border: 1px solid black;\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n\r\n.floor-info {\r\n  text-align: center;\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}